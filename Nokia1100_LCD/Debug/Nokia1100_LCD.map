Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
                              ./lcd1100/lcd.o (__udivmodhi4)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o (exit)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                              ./lcd1100/lcd.o (__do_copy_data)
/usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
                              ./lcd1100/lcd.o (__do_clear_bss)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o)
                              ./lcd1100/lcd.o (itoa)
/usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(strrev.o)
                              /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o) (strrev)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
LOAD ./1100.o
LOAD ./lcd1100/lcd.o
LOAD /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000     0x1092
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000068      0x115 ./1100.o
 .progmem.data  0x000000000000017d      0x1e5 ./lcd1100/lcd.o
                0x0000000000000362                . = ALIGN (0x2)
                0x0000000000000362                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000362        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000362                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000362                __ctors_start = .
 *(.ctors)
                0x0000000000000362                __ctors_end = .
                0x0000000000000362                __dtors_start = .
 *(.dtors)
                0x0000000000000362                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000362        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
                0x0000000000000362                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000362        0xc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x000000000000036e       0x16 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
                0x000000000000036e                __do_copy_data
 .init4         0x0000000000000384       0x10 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000384                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000394        0x8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
 *(.init9)
 *(.text)
 .text          0x000000000000039c        0x4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
                0x000000000000039c                __vector_22
                0x000000000000039c                __vector_1
                0x000000000000039c                __vector_24
                0x000000000000039c                __vector_12
                0x000000000000039c                __bad_interrupt
                0x000000000000039c                __vector_6
                0x000000000000039c                __vector_3
                0x000000000000039c                __vector_23
                0x000000000000039c                __vector_25
                0x000000000000039c                __vector_11
                0x000000000000039c                __vector_13
                0x000000000000039c                __vector_17
                0x000000000000039c                __vector_19
                0x000000000000039c                __vector_7
                0x000000000000039c                __vector_5
                0x000000000000039c                __vector_4
                0x000000000000039c                __vector_9
                0x000000000000039c                __vector_2
                0x000000000000039c                __vector_21
                0x000000000000039c                __vector_15
                0x000000000000039c                __vector_8
                0x000000000000039c                __vector_14
                0x000000000000039c                __vector_10
                0x000000000000039c                __vector_16
                0x000000000000039c                __vector_18
                0x000000000000039c                __vector_20
 .text          0x00000000000003a0        0x0 ./1100.o
 .text          0x00000000000003a0        0x0 ./lcd1100/lcd.o
 .text          0x00000000000003a0        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x00000000000003a0        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .text          0x00000000000003a0        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .text          0x00000000000003a0        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .text          0x00000000000003a0        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o)
 .text          0x00000000000003a0        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(strrev.o)
                0x00000000000003a0                . = ALIGN (0x2)
 *(.text.*)
 .text.setup    0x00000000000003a0        0x6 ./1100.o
                0x00000000000003a0                setup
 .text.demo     0x00000000000003a6      0x39e ./1100.o
                0x00000000000003a6                demo
 .text.main     0x0000000000000744        0xa ./1100.o
                0x0000000000000744                main
 .text.lcdCmd   0x000000000000074e       0x44 ./lcd1100/lcd.o
                0x000000000000074e                lcdCmd
 .text.lcdInvert
                0x0000000000000792       0x30 ./lcd1100/lcd.o
                0x0000000000000792                lcdInvert
 .text.lcdSetX  0x00000000000007c2       0x1e ./lcd1100/lcd.o
                0x00000000000007c2                lcdSetX
 .text.lcdSetY  0x00000000000007e0        0xc ./lcd1100/lcd.o
                0x00000000000007e0                lcdSetY
 .text.lcdPositionMem
                0x00000000000007ec       0x52 ./lcd1100/lcd.o
                0x00000000000007ec                lcdPositionMem
 .text.lcdHome  0x000000000000083e       0x16 ./lcd1100/lcd.o
                0x000000000000083e                lcdHome
 .text.lcdUpdate
                0x0000000000000854      0x126 ./lcd1100/lcd.o
                0x0000000000000854                lcdUpdate
 .text.lcdStrPos
                0x000000000000097a        0xa ./lcd1100/lcd.o
                0x000000000000097a                lcdStrPos
 .text.lcdNewLine
                0x0000000000000984       0x10 ./lcd1100/lcd.o
                0x0000000000000984                lcdNewLine
 .text.lcdPixel
                0x0000000000000994       0xb6 ./lcd1100/lcd.o
                0x0000000000000994                lcdPixel
 .text.lcdChar  0x0000000000000a4a       0xee ./lcd1100/lcd.o
                0x0000000000000a4a                lcdChar
 .text.lcdStr_P
                0x0000000000000b38       0x24 ./lcd1100/lcd.o
                0x0000000000000b38                lcdStr_P
 .text.lcdStr   0x0000000000000b5c       0x20 ./lcd1100/lcd.o
                0x0000000000000b5c                lcdStr
 .text.lcdInt   0x0000000000000b7c       0x40 ./lcd1100/lcd.o
                0x0000000000000b7c                lcdInt
 .text.lcdLine  0x0000000000000bbc       0x56 ./lcd1100/lcd.o
                0x0000000000000bbc                lcdLine
 .text.lcdRect  0x0000000000000c12       0xba ./lcd1100/lcd.o
                0x0000000000000c12                lcdRect
 .text.lcdCircle
                0x0000000000000ccc      0x17c ./lcd1100/lcd.o
                0x0000000000000ccc                lcdCircle
 .text.lcdBresenhamLine
                0x0000000000000e48       0xec ./lcd1100/lcd.o
                0x0000000000000e48                lcdBresenhamLine
 .text.lcdClr   0x0000000000000f34       0x16 ./lcd1100/lcd.o
                0x0000000000000f34                lcdClr
 .text.lcdCls   0x0000000000000f4a       0x4a ./lcd1100/lcd.o
                0x0000000000000f4a                lcdCls
 .text.lcdInit  0x0000000000000f94       0x70 ./lcd1100/lcd.o
                0x0000000000000f94                lcdInit
 .text.libgcc   0x0000000000001004       0x28 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
                0x0000000000001004                __udivmodhi4
 .text.libgcc   0x000000000000102c        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x000000000000102c        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x000000000000102c        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x000000000000102c       0x42 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o)
                0x000000000000102c                itoa
 .text.avr-libc
                0x000000000000106e       0x20 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(strrev.o)
                0x000000000000106e                strrev
                0x000000000000108e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000108e        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
                0x000000000000108e                exit
                0x000000000000108e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000108e        0x4 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000001092                _etext = .

.data           0x0000000000800100        0x2 load address 0x0000000000001092
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
 .data          0x0000000000800100        0x0 ./1100.o
 .data          0x0000000000800100        0x0 ./lcd1100/lcd.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(strrev.o)
 *(.data*)
 .data.markerLow
                0x0000000000800100        0x2 ./lcd1100/lcd.o
                0x0000000000800100                markerLow
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800102                . = ALIGN (0x2)
                0x0000000000800102                _edata = .
                0x0000000000800102                PROVIDE (__data_end, .)

.bss            0x0000000000800102      0x311
                0x0000000000800102                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
 .bss           0x0000000000800102        0x0 ./1100.o
 .bss           0x0000000000800102        0x0 ./lcd1100/lcd.o
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/avr5/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o)
 .bss           0x0000000000800102        0x0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(strrev.o)
 *(.bss*)
 .bss.markerHigh
                0x0000000000800102        0x2 ./lcd1100/lcd.o
                0x0000000000800102                markerHigh
 .bss.displayBuf
                0x0000000000800104      0x30c ./lcd1100/lcd.o
 .bss.cursorY   0x0000000000800410        0x1 ./lcd1100/lcd.o
 .bss.cursorX   0x0000000000800411        0x1 ./lcd1100/lcd.o
 .bss.lcdStatus
                0x0000000000800412        0x1 ./lcd1100/lcd.o
 *(COMMON)
                0x0000000000800413                PROVIDE (__bss_end, .)
                0x0000000000001092                __data_load_start = LOADADDR (.data)
                0x0000000000001094                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800413        0x0
                0x0000000000800413                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800413                PROVIDE (__noinit_end, .)
                0x0000000000800413                _end = .
                0x0000000000800413                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000      0x954
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o
 .stab          0x00000000000006cc      0x1b0 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(itoa.o)
                                        0x1bc (size before relaxing)
 .stab          0x000000000000087c       0xd8 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/libc.a(strrev.o)
                                         0xe4 (size before relaxing)

.stabstr        0x0000000000000000       0xb4
 *(.stabstr)
 .stabstr       0x0000000000000000       0xb4 /usr/lib/gcc/avr/4.5.3/../../../avr/lib/avr5/crtm328p.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(Nokia1100_LCD.elf elf32-avr)
LOAD linker stubs
